"""
AI Companion Service - Personalized Learning Assistant
-----------------------------------------------------
KiÅŸiselleÅŸtirilmiÅŸ AI Ã¶ÄŸrenme arkadaÅŸÄ± servisi.
"""

from typing import Dict, List, Optional, Any, Tuple
from datetime import datetime, timedelta
from enum import Enum
import asyncio
import json
import random
from dataclasses import dataclass
from collections import defaultdict

from loguru import logger
import numpy as np
# Langchain isteÄŸe baÄŸlÄ±
try:
    from langchain.memory import ConversationSummaryBufferMemory
    from langchain.schema import BaseMessage, HumanMessage, AIMessage
    LANGCHAIN_AVAILABLE = True
except ImportError:
    LANGCHAIN_AVAILABLE = False
    logger.warning("Langchain bulunamadÄ±, AI Companion bellek Ã¶zelliÄŸi sÄ±nÄ±rlÄ± olacak")
    # Basit yereldeÄŸiÅŸim sÄ±nÄ±flarÄ±
    ConversationSummaryBufferMemory = None
    BaseMessage = None
    HumanMessage = None
    AIMessage = None

from app.core.config import settings
from app.db.mongodb import get_database
from app.services.ai_service import ai_service
from app.services.cache_service import cache, cached
from app.services.notification_service import notification_service
from app.services.gamification_service import gamification_service


class CompanionPersonality(str, Enum):
    """AI arkadaÅŸ kiÅŸilik tipleri"""
    FRIENDLY = "friendly"          # ArkadaÅŸ canlÄ±sÄ±
    MENTOR = "mentor"              # Mentor/Rehber
    MOTIVATOR = "motivator"        # Motivasyon koÃ§u
    SCIENTIST = "scientist"        # Bilim insanÄ±
    STORYTELLER = "storyteller"    # Hikaye anlatÄ±cÄ±
    COMEDIAN = "comedian"          # EÄŸlenceli/Komik


class EmotionalState(str, Enum):
    """Ã–ÄŸrenci duygu durumlarÄ±"""
    HAPPY = "happy"
    EXCITED = "excited"
    NEUTRAL = "neutral"
    CONFUSED = "confused"
    FRUSTRATED = "frustrated"
    BORED = "bored"
    STRESSED = "stressed"
    CONFIDENT = "confident"


class LearningStyle(str, Enum):
    """Ã–ÄŸrenme stilleri"""
    VISUAL = "visual"
    AUDITORY = "auditory"
    KINESTHETIC = "kinesthetic"
    READING_WRITING = "reading_writing"
    MIXED = "mixed"


@dataclass
class StudentProfile:
    """Ã–ÄŸrenci profili"""
    user_id: str
    name: str
    age: int
    grade_level: int
    learning_style: LearningStyle
    preferred_personality: CompanionPersonality
    interests: List[str]
    strengths: List[str]
    weaknesses: List[str]
    goals: List[str]
    emotional_history: List[Dict]
    interaction_count: int = 0
    last_interaction: Optional[datetime] = None


@dataclass
class CompanionCharacter:
    """AI arkadaÅŸ karakteri"""
    id: str
    name: str
    personality: CompanionPersonality
    avatar_url: str
    voice_id: str
    introduction: str
    catchphrases: List[str]
    specialty_subjects: List[str]
    fun_facts: List[str]


class AICompanionService:
    """KiÅŸiselleÅŸtirilmiÅŸ AI Ã¶ÄŸrenme arkadaÅŸÄ± servisi"""
    
    def __init__(self):
        self.db = get_database()
        self.conversation_memories = {}  # user_id -> ConversationMemory
        
        # AI arkadaÅŸ karakterleri
        self.companions = self._initialize_companions()
        
        # Duygu analizi eÅŸikleri
        self.emotion_keywords = {
            EmotionalState.HAPPY: ["mutlu", "harika", "sÃ¼per", "gÃ¼zel", "baÅŸardÄ±m"],
            EmotionalState.EXCITED: ["heyecanlÄ±", "merak", "sabÄ±rsÄ±z", "havalÄ±"],
            EmotionalState.CONFUSED: ["anlamadÄ±m", "karÄ±ÅŸÄ±k", "zor", "kafam karÄ±ÅŸtÄ±"],
            EmotionalState.FRUSTRATED: ["sinir", "kÄ±zgÄ±n", "yapamÄ±yorum", "beceremedim"],
            EmotionalState.BORED: ["sÄ±kÄ±ldÄ±m", "sÄ±kÄ±cÄ±", "ilgimi Ã§ekmiyor"],
            EmotionalState.STRESSED: ["stres", "endiÅŸe", "kaygÄ±", "korkuyorum"],
            EmotionalState.CONFIDENT: ["baÅŸarabilirim", "kolay", "yapabilirim", "gÃ¼veniyorum"]
        }
        
        # Adaptif Ã¶ÄŸrenme parametreleri
        self.difficulty_adjustment_threshold = 0.7  # %70 baÅŸarÄ± oranÄ± hedefi
        self.motivation_boost_threshold = 0.5      # Motivasyon dÃ¼ÅŸÃ¼kse boost
        
        logger.info("AI Companion Service baÅŸlatÄ±ldÄ±")
    
    def _initialize_companions(self) -> Dict[str, CompanionCharacter]:
        """AI arkadaÅŸ karakterlerini baÅŸlat"""
        return {
            "leo_the_wise": CompanionCharacter(
                id="leo_the_wise",
                name="Bilge Leo",
                personality=CompanionPersonality.MENTOR,
                avatar_url="/avatars/leo_wise.png",
                voice_id="leo_tr",
                introduction="Merhaba! Ben Bilge Leo ðŸ¦‰ Senin Ã¶ÄŸrenme yolculuÄŸunda rehberin olacaÄŸÄ±m!",
                catchphrases=[
                    "Bilgi gÃ¼Ã§tÃ¼r!",
                    "Her hata bir Ã¶ÄŸrenme fÄ±rsatÄ±dÄ±r",
                    "Merak eden Ã¶ÄŸrenir"
                ],
                specialty_subjects=["matematik", "fen"],
                fun_facts=[
                    "BaykuÅŸlar 270 derece baÅŸlarÄ±nÄ± Ã§evirebilir!",
                    "En eski bilinen matematik problemi 4000 yÄ±l Ã¶ncesine dayanÄ±r"
                ]
            ),
            
            "maya_the_creative": CompanionCharacter(
                id="maya_the_creative",
                name="YaratÄ±cÄ± Maya",
                personality=CompanionPersonality.STORYTELLER,
                avatar_url="/avatars/maya_creative.png",
                voice_id="maya_tr",
                introduction="Selam! Ben Maya ðŸŽ¨ Ã–ÄŸrenmeyi hikayelerle renklendireceÄŸiz!",
                catchphrases=[
                    "Her konunun bir hikayesi var",
                    "Hayal gÃ¼cÃ¼ sÄ±nÄ±r tanÄ±maz",
                    "YaratÄ±cÄ±lÄ±k her yerde"
                ],
                specialty_subjects=["tÃ¼rkÃ§e", "sosyal", "sanat"],
                fun_facts=[
                    "Ä°lk animasyon filmi 1906'da Ã§ekildi!",
                    "DÃ¼nyada 7000'den fazla dil konuÅŸuluyor"
                ]
            ),
            
            "max_the_motivator": CompanionCharacter(
                id="max_the_motivator",
                name="Motivator Max",
                personality=CompanionPersonality.MOTIVATOR,
                avatar_url="/avatars/max_motivator.png",
                voice_id="max_tr",
                introduction="Hey! Ben Max ðŸ’ª Seninle her zorluÄŸu aÅŸacaÄŸÄ±z!",
                catchphrases=[
                    "Sen yapabilirsin!",
                    "Pes etme, devam et!",
                    "Her gÃ¼n yeni bir baÅŸarÄ±"
                ],
                specialty_subjects=["spor", "kiÅŸisel geliÅŸim"],
                fun_facts=[
                    "Ä°nsan beyni %75 sudan oluÅŸur",
                    "GÃ¼lmek 15 kas grubunu Ã§alÄ±ÅŸtÄ±rÄ±r"
                ]
            ),
            
            "nova_the_scientist": CompanionCharacter(
                id="nova_the_scientist",
                name="Bilimci Nova",
                personality=CompanionPersonality.SCIENTIST,
                avatar_url="/avatars/nova_scientist.png",
                voice_id="nova_tr",
                introduction="Merhaba genÃ§ bilim insanÄ±! Ben Nova ðŸ”¬ Birlikte keÅŸfedelim!",
                catchphrases=[
                    "Deneyelim ve gÃ¶relim!",
                    "Bilim her yerde",
                    "Soru sormak bilimin baÅŸlangÄ±cÄ±"
                ],
                specialty_subjects=["fen", "teknoloji", "matematik"],
                fun_facts=[
                    "Bir yÄ±ldÄ±rÄ±m 30.000Â°C sÄ±caklÄ±ÄŸa ulaÅŸabilir",
                    "Ay her yÄ±l DÃ¼nya'dan 3.8 cm uzaklaÅŸÄ±yor"
                ]
            )
        }
    
    async def get_or_create_student_profile(self, user_id: str) -> StudentProfile:
        """Ã–ÄŸrenci profilini getir veya oluÅŸtur"""
        # Cache'den kontrol et
        cache_key = f"student_profile:{user_id}"
        cached_profile = await cache.get(cache_key, namespace="ai_companion")
        
        if cached_profile:
            return StudentProfile(**cached_profile)
        
        if not self.db:
            # Default profil
            return StudentProfile(
                user_id=user_id,
                name="Ã–ÄŸrenci",
                age=10,
                grade_level=5,
                learning_style=LearningStyle.MIXED,
                preferred_personality=CompanionPersonality.FRIENDLY,
                interests=["oyun", "bilim", "sanat"],
                strengths=[],
                weaknesses=[],
                goals=[],
                emotional_history=[]
            )
        
        # VeritabanÄ±ndan al
        profile_data = await self.db.ai_companion_profiles.find_one({"user_id": user_id})
        
        if not profile_data:
            # Yeni profil oluÅŸtur
            user = await self.db.users.find_one({"_id": user_id})
            
            profile = StudentProfile(
                user_id=user_id,
                name=user.get("full_name", "Ã–ÄŸrenci") if user else "Ã–ÄŸrenci",
                age=user.get("age", 10) if user else 10,
                grade_level=user.get("grade_level", 5) if user else 5,
                learning_style=LearningStyle.MIXED,
                preferred_personality=CompanionPersonality.FRIENDLY,
                interests=[],
                strengths=[],
                weaknesses=[],
                goals=[],
                emotional_history=[]
            )
            
            # VeritabanÄ±na kaydet
            await self.db.ai_companion_profiles.insert_one(profile.__dict__)
        else:
            profile = StudentProfile(**profile_data)
        
        # Cache'e kaydet
        await cache.set(cache_key, profile.__dict__, ttl=3600, namespace="ai_companion")
        
        return profile
    
    async def analyze_emotion(self, text: str) -> EmotionalState:
        """Metinden duygu durumu analizi"""
        text_lower = text.lower()
        
        # Keyword matching
        emotion_scores = defaultdict(int)
        
        for emotion, keywords in self.emotion_keywords.items():
            for keyword in keywords:
                if keyword in text_lower:
                    emotion_scores[emotion] += 1
        
        # En yÃ¼ksek skoru bul
        if emotion_scores:
            return max(emotion_scores.items(), key=lambda x: x[1])[0]
        
        # TODO: Daha geliÅŸmiÅŸ sentiment analysis
        return EmotionalState.NEUTRAL
    
    async def get_adaptive_response(
        self,
        user_id: str,
        message: str,
        subject: Optional[str] = None,
        lesson_context: Optional[Dict] = None
    ) -> Tuple[str, Dict[str, Any]]:
        """
        Adaptif AI yanÄ±tÄ± Ã¼ret
        
        Returns:
            response: AI yanÄ±tÄ±
            metadata: Ek bilgiler (duygu durumu, Ã¶neriler, vs.)
        """
        # Ã–ÄŸrenci profili
        profile = await self.get_or_create_student_profile(user_id)
        
        # Duygu durumu analizi
        emotion = await self.analyze_emotion(message)
        
        # Conversation memory
        if user_id not in self.conversation_memories:
            self.conversation_memories[user_id] = ConversationSummaryBufferMemory(
                llm=None,  # AI service kullanÄ±lacak
                max_token_limit=2000,
                return_messages=True
            )
        
        memory = self.conversation_memories[user_id]
        
        # AI arkadaÅŸÄ± seÃ§
        companion = self.companions.get(
            profile.preferred_personality,
            self.companions["leo_the_wise"]
        )
        
        # Sistem promptu oluÅŸtur
        system_prompt = self._build_companion_prompt(
            companion=companion,
            profile=profile,
            emotion=emotion,
            subject=subject,
            lesson_context=lesson_context
        )
        
        # KonuÅŸma geÃ§miÅŸi
        messages = memory.chat_memory.messages[-10:]  # Son 10 mesaj
        
        # AI yanÄ±tÄ± al
        try:
            response, ai_metadata = await ai_service.get_ai_response(
                prompt=message,
                grade_level=profile.grade_level,
                subject=subject or "genel",
                context=system_prompt,
                conversation_history=[
                    {"role": "human" if isinstance(m, HumanMessage) else "assistant", "content": m.content}
                    for m in messages
                ],
                user_name=profile.name
            )
            
            # Memory'ye ekle
            memory.chat_memory.add_user_message(message)
            memory.chat_memory.add_ai_message(response)
            
            # Profili gÃ¼ncelle
            await self._update_student_profile(profile, emotion, subject)
            
            # Metadata oluÅŸtur
            metadata = {
                "emotion_detected": emotion,
                "companion": companion.name,
                "personality": companion.personality,
                "learning_style": profile.learning_style,
                "adaptive_features": await self._get_adaptive_features(profile, emotion),
                **ai_metadata
            }
            
            # Gamification entegrasyonu
            if emotion in [EmotionalState.HAPPY, EmotionalState.EXCITED, EmotionalState.CONFIDENT]:
                await gamification_service.add_points(
                    user_id=user_id,
                    action="positive_interaction",
                    metadata={"emotion": emotion}
                )
            
            return response, metadata
            
        except Exception as e:
            logger.error(f"AI Companion yanÄ±t hatasÄ±: {e}")
            return companion.catchphrases[0], {"error": str(e)}
    
    def _build_companion_prompt(
        self,
        companion: CompanionCharacter,
        profile: StudentProfile,
        emotion: EmotionalState,
        subject: Optional[str],
        lesson_context: Optional[Dict]
    ) -> str:
        """AI arkadaÅŸ sistem promptu oluÅŸtur"""
        prompt = f"""Sen {companion.name}, bir AI Ã¶ÄŸrenme arkadaÅŸÄ±sÄ±n.

KiÅŸiliÄŸin: {companion.personality}
Ã–ÄŸrenci Bilgileri:
- Ä°sim: {profile.name}
- YaÅŸ: {profile.age}
- SÄ±nÄ±f: {profile.grade_level}
- Ã–ÄŸrenme Stili: {profile.learning_style}
- Ä°lgi AlanlarÄ±: {', '.join(profile.interests)}

Ã–ÄŸrencinin Åžu Anki Duygu Durumu: {emotion}

DavranÄ±ÅŸ KurallarÄ±:
1. YaÅŸÄ±na uygun, samimi ve destekleyici bir dil kullan
2. {companion.personality} kiÅŸilik Ã¶zelliklerine uygun davran
3. Ã–ÄŸrencinin duygu durumuna empati gÃ¶ster
4. KarmaÅŸÄ±k konularÄ± basit ve eÄŸlenceli ÅŸekilde anlat
5. SÄ±k sÄ±k teÅŸvik et ve motive et
6. HatalarÄ± Ã¶ÄŸrenme fÄ±rsatÄ± olarak gÃ¶ster
7. Merak uyandÄ±racak sorular sor
"""

        # Duygu durumuna gÃ¶re ek yÃ¶nergeler
        emotion_guidelines = {
            EmotionalState.CONFUSED: "SabÄ±rlÄ± ol, adÄ±m adÄ±m aÃ§Ä±kla, Ã¶rnekler ver",
            EmotionalState.FRUSTRATED: "SakinleÅŸtir, baÅŸarÄ±lÄ± olduÄŸu noktalarÄ± hatÄ±rlat",
            EmotionalState.BORED: "EÄŸlenceli Ã¶rnekler kullan, oyunlaÅŸtÄ±r",
            EmotionalState.STRESSED: "RahatlatÄ±cÄ± ol, derin nefes almayÄ± Ã¶ner",
            EmotionalState.HAPPY: "Enerjisini koru, baÅŸarÄ±larÄ±nÄ± kutla"
        }
        
        if emotion in emotion_guidelines:
            prompt += f"\n\nÃ–zel Dikkat: {emotion_guidelines[emotion]}"
        
        # Konu baÄŸlamÄ±
        if subject:
            prompt += f"\n\nKonu: {subject}"
            if subject in companion.specialty_subjects:
                prompt += f"\nBu senin uzmanlÄ±k alanÄ±n! Bilgini ve tutkunla Ã¶ÄŸrenciyi etkile."
        
        # Ders baÄŸlamÄ±
        if lesson_context:
            prompt += f"\n\nDers Bilgisi: {json.dumps(lesson_context, ensure_ascii=False)}"
        
        # Catchphrase kullan
        prompt += f"\n\nSÄ±k kullandÄ±ÄŸÄ±n sÃ¶zler: {', '.join(companion.catchphrases)}"
        
        return prompt
    
    async def _update_student_profile(
        self,
        profile: StudentProfile,
        emotion: EmotionalState,
        subject: Optional[str]
    ):
        """Ã–ÄŸrenci profilini gÃ¼ncelle"""
        if not self.db:
            return
        
        # Duygu geÃ§miÅŸi
        profile.emotional_history.append({
            "emotion": emotion,
            "timestamp": datetime.utcnow(),
            "subject": subject
        })
        
        # Son 100 duygu kaydÄ±nÄ± tut
        if len(profile.emotional_history) > 100:
            profile.emotional_history = profile.emotional_history[-100:]
        
        # EtkileÅŸim sayÄ±sÄ±
        profile.interaction_count += 1
        profile.last_interaction = datetime.utcnow()
        
        # VeritabanÄ±nda gÃ¼ncelle
        await self.db.ai_companion_profiles.update_one(
            {"user_id": profile.user_id},
            {"$set": profile.__dict__},
            upsert=True
        )
        
        # Cache'i gÃ¼ncelle
        cache_key = f"student_profile:{profile.user_id}"
        await cache.set(cache_key, profile.__dict__, ttl=3600, namespace="ai_companion")
    
    async def _get_adaptive_features(
        self,
        profile: StudentProfile,
        emotion: EmotionalState
    ) -> Dict[str, Any]:
        """Adaptif Ã¶zellikler belirle"""
        features = {
            "difficulty_adjustment": 0,  # -1: azalt, 0: aynÄ±, 1: artÄ±r
            "content_style": profile.learning_style,
            "motivation_needed": False,
            "break_suggested": False,
            "extra_practice": False
        }
        
        # Duygu durumuna gÃ¶re ayarla
        if emotion in [EmotionalState.CONFUSED, EmotionalState.FRUSTRATED]:
            features["difficulty_adjustment"] = -1
            features["motivation_needed"] = True
        
        elif emotion == EmotionalState.BORED:
            features["difficulty_adjustment"] = 1
            features["content_style"] = "interactive"
        
        elif emotion == EmotionalState.STRESSED:
            features["break_suggested"] = True
            features["motivation_needed"] = True
        
        # Performans analizi
        if profile.weaknesses:
            features["extra_practice"] = True
        
        return features
    
    async def generate_study_buddy_session(
        self,
        user_id: str,
        subject: str,
        topic: str,
        duration_minutes: int = 25  # Pomodoro
    ) -> Dict[str, Any]:
        """AI ile Ã§alÄ±ÅŸma arkadaÅŸÄ± seansÄ± oluÅŸtur"""
        profile = await self.get_or_create_student_profile(user_id)
        companion = self.companions.get(profile.preferred_personality)
        
        session = {
            "id": f"session_{datetime.utcnow().timestamp()}",
            "companion": companion.name,
            "subject": subject,
            "topic": topic,
            "duration": duration_minutes,
            "activities": [],
            "checkpoints": [],
            "rewards": []
        }
        
        # Aktiviteler oluÅŸtur
        if duration_minutes <= 15:
            # KÄ±sa seans
            session["activities"] = [
                {"type": "warm_up", "duration": 3, "content": "HÄ±zlÄ± tekrar"},
                {"type": "main_lesson", "duration": 10, "content": topic},
                {"type": "quick_quiz", "duration": 2, "content": "Mini quiz"}
            ]
        else:
            # Normal seans
            session["activities"] = [
                {"type": "warm_up", "duration": 5, "content": "Ã–nceki konularÄ± hatÄ±rlayalÄ±m"},
                {"type": "main_lesson", "duration": 15, "content": topic},
                {"type": "practice", "duration": 5, "content": "Ã–rnek sorular"}
            ]
        
        # Kontrol noktalarÄ±
        session["checkpoints"] = [
            {"time": 5, "type": "emotion_check", "message": "NasÄ±l gidiyor?"},
            {"time": 15, "type": "progress_check", "message": "AnladÄ±n mÄ± kontrol edelim"},
            {"time": duration_minutes, "type": "final_check", "message": "Harika iÅŸ Ã§Ä±kardÄ±n!"}
        ]
        
        # Ã–dÃ¼ller
        session["rewards"] = [
            {"type": "points", "amount": 50, "condition": "complete_session"},
            {"type": "badge", "name": "study_buddy", "condition": "first_session"},
            {"type": "streak", "days": 1, "condition": "daily_session"}
        ]
        
        # VeritabanÄ±na kaydet
        if self.db:
            await self.db.study_buddy_sessions.insert_one({
                **session,
                "user_id": user_id,
                "created_at": datetime.utcnow(),
                "status": "scheduled"
            })
        
        return session
    
    async def get_companion_suggestions(
        self,
        user_id: str
    ) -> List[CompanionCharacter]:
        """Ã–ÄŸrenciye uygun AI arkadaÅŸ Ã¶nerileri"""
        profile = await self.get_or_create_student_profile(user_id)
        
        # TÃ¼m arkadaÅŸlarÄ± al
        companions = list(self.companions.values())
        
        # Ã–ÄŸrenci profiline gÃ¶re sÄ±rala
        suggestions = []
        
        for companion in companions:
            score = 0
            
            # Ä°lgi alanÄ± eÅŸleÅŸmesi
            for interest in profile.interests:
                if any(subject in companion.specialty_subjects for subject in [interest]):
                    score += 2
            
            # YaÅŸ uyumu
            if profile.age <= 10 and companion.personality in [CompanionPersonality.STORYTELLER, CompanionPersonality.FRIENDLY]:
                score += 1
            elif profile.age > 10 and companion.personality in [CompanionPersonality.MENTOR, CompanionPersonality.SCIENTIST]:
                score += 1
            
            # Ã–ÄŸrenme stili uyumu
            style_match = {
                LearningStyle.VISUAL: [CompanionPersonality.STORYTELLER],
                LearningStyle.AUDITORY: [CompanionPersonality.COMEDIAN],
                LearningStyle.KINESTHETIC: [CompanionPersonality.MOTIVATOR]
            }
            
            if profile.learning_style in style_match:
                if companion.personality in style_match[profile.learning_style]:
                    score += 2
            
            suggestions.append((companion, score))
        
        # Skora gÃ¶re sÄ±rala
        suggestions.sort(key=lambda x: x[1], reverse=True)
        
        return [comp[0] for comp in suggestions[:3]]  # En iyi 3 Ã¶neri
    
    async def switch_companion(
        self,
        user_id: str,
        companion_id: str
    ) -> bool:
        """AI arkadaÅŸÄ± deÄŸiÅŸtir"""
        if companion_id not in self.companions:
            return False
        
        profile = await self.get_or_create_student_profile(user_id)
        profile.preferred_personality = self.companions[companion_id].personality
        
        # GÃ¼ncelle
        if self.db:
            await self.db.ai_companion_profiles.update_one(
                {"user_id": user_id},
                {"$set": {"preferred_personality": profile.preferred_personality}},
                upsert=True
            )
        
        # Cache'i temizle
        cache_key = f"student_profile:{user_id}"
        await cache.delete(cache_key, namespace="ai_companion")
        
        # HoÅŸgeldin mesajÄ± iÃ§in bildirim
        companion = self.companions[companion_id]
        await notification_service.send_notification(
            user_id=user_id,
            title=f"{companion.name} Seninle! ðŸŽ‰",
            message=companion.introduction,
            notification_type=["in_app"],
            data={"companion_id": companion_id}
        )
        
        return True
    
    async def get_daily_motivation(
        self,
        user_id: str
    ) -> Dict[str, str]:
        """GÃ¼nlÃ¼k motivasyon mesajÄ±"""
        profile = await self.get_or_create_student_profile(user_id)
        companion = self.companions.get(profile.preferred_personality)
        
        # Son duygu durumu
        recent_emotions = profile.emotional_history[-5:] if profile.emotional_history else []
        dominant_emotion = EmotionalState.NEUTRAL
        
        if recent_emotions:
            emotion_counts = defaultdict(int)
            for record in recent_emotions:
                emotion_counts[record["emotion"]] += 1
            dominant_emotion = max(emotion_counts.items(), key=lambda x: x[1])[0]
        
        # Motivasyon mesajlarÄ±
        motivations = {
            EmotionalState.HAPPY: [
                "Enerjin harika! BugÃ¼n neler Ã¶ÄŸreneceÄŸiz? ðŸŒŸ",
                "GÃ¼lÃ¼msemen bulaÅŸÄ±cÄ±! Hadi Ã¶ÄŸrenmeye devam! ðŸ˜Š"
            ],
            EmotionalState.CONFUSED: [
                "Her ÅŸey zamanla netleÅŸir, adÄ±m adÄ±m ilerleyelim ðŸŒˆ",
                "Kafan karÄ±ÅŸÄ±ksa demek ki Ã¶ÄŸreniyorsun! Bu normal ðŸ§©"
            ],
            EmotionalState.STRESSED: [
                "Derin bir nefes al... Her ÅŸey yoluna girecek ðŸŒ¸",
                "Stres geÃ§ici, baÅŸarÄ±n kalÄ±cÄ±! YanÄ±ndayÄ±m ðŸ’ª"
            ]
        }
        
        # Rastgele seÃ§
        messages = motivations.get(dominant_emotion, [
            "Yeni bir gÃ¼n, yeni fÄ±rsatlar! ðŸŒ…",
            "Ã–ÄŸrenme yolculuÄŸunda seninleyim! ðŸš€"
        ])
        
        motivation = random.choice(messages)
        
        # Fun fact ekle
        fun_fact = random.choice(companion.fun_facts) if companion else ""
        
        return {
            "message": f"{companion.name}: {motivation}",
            "fun_fact": f"GÃ¼nÃ¼n ilginÃ§ bilgisi: {fun_fact}",
            "companion": companion.name if companion else "AI ArkadaÅŸ"
        }


# Global AI companion service instance
ai_companion_service = AICompanionService()


# Helper functions
async def start_study_session(
    user_id: str,
    subject: str,
    topic: str,
    duration: int = 25
) -> Dict:
    """Ã‡alÄ±ÅŸma seansÄ± baÅŸlat"""
    return await ai_companion_service.generate_study_buddy_session(
        user_id=user_id,
        subject=subject,
        topic=topic,
        duration_minutes=duration
    )


async def chat_with_companion(
    user_id: str,
    message: str,
    subject: Optional[str] = None
) -> Tuple[str, Dict]:
    """AI arkadaÅŸ ile sohbet"""
    return await ai_companion_service.get_adaptive_response(
        user_id=user_id,
        message=message,
        subject=subject
    )
