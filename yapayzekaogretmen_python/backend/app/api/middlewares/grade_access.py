"""
Grade-Based Access Control Middleware

Ã–NEMLÄ° GÃœVENLIK KURALI:
- Ã–ÄŸrenci SADECE kendi sÄ±nÄ±fÄ±nÄ±n kaynaklarÄ±na eriÅŸebilir
- 5. sÄ±nÄ±f Ã¶ÄŸrencisi â†’ Sadece 5. sÄ±nÄ±f dersleri
- URL manipÃ¼lasyonu engellenir
- Backend'de doÄŸrulama yapÄ±lÄ±r
"""

from fastapi import HTTPException, status
from typing import Optional
from loguru import logger


class GradeAccessControl:
    """SÄ±nÄ±f bazlÄ± eriÅŸim kontrolÃ¼"""
    
    @staticmethod
    def validate_grade_access(
        user_grade: int,
        resource_grade: int,
        resource_type: str = "lesson",
        resource_id: str = None
    ) -> bool:
        """
        Ã–ÄŸrencinin kaynaÄŸa eriÅŸim yetkisi var mÄ± kontrol et
        
        Args:
            user_grade: Ã–ÄŸrencinin sÄ±nÄ±fÄ±
            resource_grade: KaynaÄŸÄ±n sÄ±nÄ±fÄ±
            resource_type: Kaynak tipi (lesson, quiz, unit, vb.)
            resource_id: Kaynak ID'si
            
        Returns:
            bool: EriÅŸim izni var mÄ±?
            
        Raises:
            HTTPException: EriÅŸim reddedilirse
        """
        
        # Admin kontrolÃ¼ - Admin her ÅŸeye eriÅŸebilir
        # Bu kontrol Ã§aÄŸÄ±ran fonksiyonda yapÄ±lmalÄ±
        
        # SÄ±nÄ±f eÅŸleÅŸmesi kontrolÃ¼
        if user_grade != resource_grade:
            # GÃ¼venlik log'u
            logger.warning(
                f"ğŸš¨ GRADE ACCESS DENIED: "
                f"User Grade={user_grade}, "
                f"Resource Grade={resource_grade}, "
                f"Type={resource_type}, "
                f"ID={resource_id}"
            )
            
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail={
                    "error": "GRADE_ACCESS_DENIED",
                    "message": f"Bu {resource_grade}. sÄ±nÄ±f {resource_type}'ine eriÅŸim yetkiniz yok.",
                    "user_grade": user_grade,
                    "resource_grade": resource_grade,
                    "suggestion": f"Sadece {user_grade}. sÄ±nÄ±f kaynaklarÄ±na eriÅŸebilirsiniz."
                }
            )
        
        logger.info(f"âœ… Grade access granted: {user_grade}. sÄ±nÄ±f â†’ {resource_type}")
        return True
    
    @staticmethod
    def filter_by_grade(items: list, user_grade: int, grade_field: str = "grade") -> list:
        """
        Liste iÃ§indeki Ã¶ÄŸeleri kullanÄ±cÄ±nÄ±n sÄ±nÄ±fÄ±na gÃ¶re filtrele
        
        Args:
            items: Filtrelenecek liste
            user_grade: Ã–ÄŸrencinin sÄ±nÄ±fÄ±
            grade_field: Grade bilgisinin bulunduÄŸu alan adÄ±
            
        Returns:
            list: FiltrelenmiÅŸ liste (sadece kendi sÄ±nÄ±fÄ±)
        """
        
        if not items:
            return []
        
        filtered = [
            item for item in items 
            if item.get(grade_field) == user_grade
        ]
        
        logger.info(
            f"ğŸ“š Grade filter: {len(filtered)}/{len(items)} items "
            f"(Grade {user_grade})"
        )
        
        return filtered
    
    @staticmethod
    def check_lesson_access(user_grade: int, lesson_data: dict) -> dict:
        """
        Ders eriÅŸim kontrolÃ¼
        
        Returns:
            dict: EriÅŸim bilgisi
        """
        
        lesson_grade = lesson_data.get("grade")
        
        if lesson_grade != user_grade:
            return {
                "allowed": False,
                "reason": "grade_mismatch",
                "message": f"Bu {lesson_grade}. sÄ±nÄ±f dersi. Senin sÄ±nÄ±fÄ±n: {user_grade}"
            }
        
        return {
            "allowed": True
        }
    
    @staticmethod
    def get_allowed_grades(user_grade: int, user_role: str = "student") -> list:
        """
        KullanÄ±cÄ±nÄ±n eriÅŸebileceÄŸi sÄ±nÄ±flar
        
        Args:
            user_grade: KullanÄ±cÄ±nÄ±n sÄ±nÄ±fÄ±
            user_role: KullanÄ±cÄ±nÄ±n rolÃ¼ (student, teacher, admin)
            
        Returns:
            list: EriÅŸilebilir sÄ±nÄ±flar
        """
        
        if user_role == "admin":
            # Admin tÃ¼m sÄ±nÄ±flara eriÅŸebilir
            return list(range(1, 13))  # 1-12. sÄ±nÄ±flar
        
        if user_role == "teacher":
            # Ã–ÄŸretmen birden fazla sÄ±nÄ±fa eriÅŸebilir
            # Bu Ã¶ÄŸretmenin atandÄ±ÄŸÄ± sÄ±nÄ±flar (DB'den gelir)
            return [user_grade]  # BasitleÅŸtirilmiÅŸ
        
        # Ã–ÄŸrenci sadece kendi sÄ±nÄ±fÄ±na eriÅŸebilir
        return [user_grade]
    
    @staticmethod
    def validate_curriculum_access(user_grade: int, curriculum_grade: int):
        """
        MÃ¼fredat eriÅŸim kontrolÃ¼
        """
        
        if user_grade != curriculum_grade:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail={
                    "error": "CURRICULUM_ACCESS_DENIED",
                    "message": f"{curriculum_grade}. sÄ±nÄ±f mÃ¼fredatÄ±na eriÅŸim yetkiniz yok.",
                    "user_grade": user_grade,
                    "allowed_grade": user_grade
                }
            )
        
        return True


# Singleton instance
grade_access_control = GradeAccessControl()

